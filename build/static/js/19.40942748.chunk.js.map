{"version":3,"sources":["views/charts/ChartBarSimple.js","views/widgets/WidgetsDropdown.js","constant.js","views/charts/ChartLineSimple.js"],"names":["ChartBarSimple","props","backgroundColor","pointHoverBackgroundColor","dataPoints","label","attributes","pointed","defaultDatasets","data","getColor","barPercentage","categoryPercentage","defaultOptions","maintainAspectRatio","legend","display","scales","xAxes","yAxes","datasets","options","labels","defaultProps","WidgetsDropdown","sm","lg","color","header","text","footerSlot","ChartLineSimple","className","style","height","baseUrl","borderColor","pointHoverColor","pointBackgroundColor","pointedOptions","offset","gridLines","zeroLineColor","ticks","fontSize","fontColor","min","Math","apply","max","elements","line","borderWidth","point","radius","hitRadius","hoverRadius","straightOptions","Object","assign","computedDatasets","deepObjectsMerge","computedOptions"],"mappings":"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","file":"static/js/19.40942748.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { getColor } from '@coreui/utils'\r\nimport { CChartBar } from '@coreui/react-chartjs'\r\n\r\nconst ChartBarSimple = props => {\r\n\r\n  const {\r\n    backgroundColor,\r\n    pointHoverBackgroundColor,\r\n    dataPoints,\r\n    label,\r\n    pointed,\r\n    ...attributes\r\n  } = props\r\n\r\n  const defaultDatasets = (()=>{\r\n    return [\r\n      {\r\n        data: dataPoints,\r\n        backgroundColor: getColor(backgroundColor),\r\n        pointHoverBackgroundColor: getColor(pointHoverBackgroundColor),\r\n        label: label,\r\n        barPercentage: 0.5,\r\n        categoryPercentage: 1\r\n      }\r\n    ]\r\n  })()\r\n\r\n  const defaultOptions = (()=>{\r\n    return {\r\n      maintainAspectRatio: false,\r\n      legend: {\r\n        display: false\r\n      },\r\n      scales: {\r\n        xAxes: [{\r\n          display: false\r\n        }],\r\n        yAxes: [{\r\n          display: false\r\n        }]\r\n      }\r\n    }\r\n  })()\r\n\r\n  // render\r\n  return (\r\n    <CChartBar\r\n      {...attributes}\r\n      datasets={defaultDatasets}\r\n      options={defaultOptions}\r\n      labels={label}\r\n    />\r\n  )\r\n}\r\n\r\nChartBarSimple.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  className: PropTypes.string,\r\n  //\r\n  backgroundColor: PropTypes.string,\r\n  pointHoverBackgroundColor: PropTypes.string,\r\n  dataPoints: PropTypes.array,\r\n  label: PropTypes.string,\r\n  pointed: PropTypes.bool\r\n};\r\n\r\nChartBarSimple.defaultProps = {\r\n  backgroundColor: 'rgba(0,0,0,.2)',\r\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\r\n  label: 'Sales'\r\n};\r\n\r\nexport default ChartBarSimple\r\n","import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CWidgetDropdown,\r\n  CRow,\r\n  CCol,\r\n  CDropdown,\r\n  CDropdownMenu,\r\n  CDropdownItem,\r\n  CDropdownToggle\r\n} from '@coreui/react'\r\nimport axios from \"axios\";\r\nimport *as  CONSTANT from '../../constant'\r\nimport CIcon from '@coreui/icons-react'\r\nimport ChartLineSimple from '../charts/ChartLineSimple'\r\nimport ChartBarSimple from '../charts/ChartBarSimple'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nconst WidgetsDropdown = () => {\r\n  // const [total, setTotal] = useState([]);\r\n  // const [totalCount, setTotalCount] = useState({\r\n  //   allTotal :0\r\n  // });\r\n  // const options = {\r\n  //   headers: {'token': localStorage.getItem('token')}\r\n  // };\r\n  // const color =[\"gradient-primary\",\"gradient-info\", \"gradient-primary\"]\r\n  // useEffect(() => {\r\n  //   getdata()\r\n  // }, []);\r\n\r\n  // const getdata = async (id) => {\r\n  //   const res = await axios.get(`${CONSTANT.baseUrl}/api/admin/get-total`, options);\r\n  //   console.warn(\"response\", res.data)\r\n  //   if (res.data.code != 200) {\r\n  //     toast(\"Somethig went wrong\");\r\n  //   } else {\r\n  //     toast(\"Get successfully\");\r\n  //     for (const item of res.data.data) {\r\n  //       totalCount.allTotal += item.COUNT\r\n  //     }\r\n  //     setTotal(res.data.data);\r\n  //   }\r\n  // }\r\n\r\n  // render\r\n  return (\r\n    <>\r\n      <CRow>\r\n        {/* {\r\n          total.map((item, i) => <CCol sm=\"6\" lg=\"3\">\r\n            <CWidgetDropdown \r\n              color={color[i]}\r\n              header={item.COUNT}\r\n              text={item._id.block_user== 1 ? \"Block Users\": item._id.minner_Activity == true? \"Online Users\" : \"Ofline Users\" }\r\n              footerSlot={\r\n                <ChartLineSimple\r\n                  pointed\r\n                  className=\"c-chart-wrapper mt-3 mx-3\"\r\n                  style={{ height: '70px' }}\r\n                  dataPoints={[65, 59, 84, 84, 51, 55, 40]}\r\n                  pointHoverBackgroundColor=\"primary\"\r\n                  label=\"Members\"\r\n                  labels=\"months\"\r\n                />\r\n                \r\n              }\r\n              \r\n            >\r\n            </CWidgetDropdown>\r\n          </CCol>\r\n          )\r\n        } */}\r\n         <CCol sm=\"6\" lg=\"3\">\r\n            <CWidgetDropdown\r\n              color=\"gradient-primary\"\r\n              header=\"50000\"\r\n              text={\"Total Users\" }\r\n              footerSlot={\r\n                <ChartLineSimple\r\n                  pointed\r\n                  className=\"c-chart-wrapper mt-3 mx-3\"\r\n                  style={{ height: '70px' }}\r\n                  dataPoints={[65, 59, 84, 84, 51, 55, 40]}\r\n                  pointHoverBackgroundColor=\"primary\"\r\n                  label=\"Members\"\r\n                  labels=\"months\"\r\n                />\r\n              }\r\n            >\r\n            </CWidgetDropdown>\r\n          </CCol>\r\n      </CRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WidgetsDropdown\r\n","export const baseUrl  = \"http://3.12.65.48:4004\"\r\n// export const baseUrl  = \"http://localhost:4004\"\r\n// export const img_url = \"http://localhost:4004/\"\r\nexport const img_url = \"http://3.12.65.48:4004/\"\r\nexport const CONSTANT_NUMBER_2 = 'hello I am also a constant';\r\nexport const sample_file = 'http://3.12.65.48:4004/src/assets/samplesheet.xlsx'","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { getColor, deepObjectsMerge } from '@coreui/utils'\r\nimport { CChartLine } from '@coreui/react-chartjs'\r\n\r\nconst ChartLineSimple = props => {\r\n\r\n  const {\r\n    borderColor,\r\n    backgroundColor,\r\n    pointHoverBackgroundColor,\r\n    dataPoints,\r\n    label,\r\n    pointed,\r\n    ...attributes\r\n  } = props\r\n\r\n  const pointHoverColor = (()=>{\r\n    if (pointHoverBackgroundColor) {\r\n      return pointHoverBackgroundColor\r\n    } else if (backgroundColor !== 'transparent') {\r\n      return backgroundColor\r\n    }\r\n    return borderColor\r\n  })()\r\n\r\n  const defaultDatasets = (()=>{\r\n    return [\r\n      {\r\n        data: dataPoints,\r\n        borderColor: getColor(borderColor),\r\n        backgroundColor: getColor(backgroundColor),\r\n        pointBackgroundColor: getColor(pointHoverColor),\r\n        pointHoverBackgroundColor: getColor(pointHoverColor),\r\n        label\r\n      }\r\n    ]\r\n  })()\r\n\r\n  const pointedOptions = (()=>{\r\n    return {\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            offset: true,\r\n            gridLines: {\r\n              color: 'transparent',\r\n              zeroLineColor: 'transparent'\r\n            },\r\n            ticks: {\r\n              fontSize: 2,\r\n              fontColor: 'transparent'\r\n            }\r\n          }\r\n        ],\r\n        yAxes: [\r\n          {\r\n            display: false,\r\n            ticks: {\r\n              display: false,\r\n              min: Math.min.apply(Math, dataPoints) - 5,\r\n              max: Math.max.apply(Math, dataPoints) + 5\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      elements: {\r\n        line: {\r\n          borderWidth: 1\r\n        },\r\n        point: {\r\n          radius: 4,\r\n          hitRadius: 10,\r\n          hoverRadius: 4\r\n        }\r\n      }\r\n    }\r\n  })()\r\n\r\n  const straightOptions = (()=>{\r\n    return {\r\n      scales: {\r\n        xAxes: [{\r\n          display: false\r\n        }],\r\n        yAxes: [{\r\n          display: false\r\n        }]\r\n      },\r\n      elements: {\r\n        line: {\r\n          borderWidth: 2\r\n        },\r\n        point: {\r\n          radius: 0,\r\n          hitRadius: 10,\r\n          hoverRadius: 4\r\n        }\r\n      }\r\n    }\r\n  })()\r\n\r\n  const defaultOptions = (()=>{\r\n    const options = pointed ? pointedOptions : straightOptions\r\n      return Object.assign({}, options, {\r\n        maintainAspectRatio: false,\r\n        legend: {\r\n          display: false\r\n        }\r\n      })\r\n  })()\r\n\r\n  const computedDatasets = (() => {\r\n    return deepObjectsMerge(defaultDatasets, attributes.datasets || {})\r\n  })()\r\n\r\n  const computedOptions = (() => {\r\n    return deepObjectsMerge(defaultOptions, attributes.options || {})\r\n  })()\r\n\r\n  // render\r\n\r\n  return (\r\n    <CChartLine\r\n      {...attributes}\r\n      datasets={computedDatasets}\r\n      options={computedOptions}\r\n      labels={label}\r\n    />\r\n  )\r\n}\r\n\r\nChartLineSimple.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  className: PropTypes.string,\r\n  //\r\n  borderColor: PropTypes.string,\r\n  backgroundColor: PropTypes.string,\r\n  pointHoverBackgroundColor: PropTypes.string,\r\n  dataPoints: PropTypes.array,\r\n  label: PropTypes.string,\r\n  pointed: PropTypes.bool\r\n};\r\n\r\nChartLineSimple.defaultProps = {\r\n  borderColor: 'rgba(255,255,255,.55)',\r\n  backgroundColor: 'transparent',\r\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\r\n  label: 'Sales'\r\n};\r\n\r\nexport default ChartLineSimple\r\n"],"sourceRoot":""}